'use strict';

/* global THREE */

function main() {
  const canvas = document.querySelector('#c');
 
  const renderer = new THREE.WebGLRenderer({canvas});

  const fov = 75;
  const aspect = 2;  // the canvas default
  const near = 0.1;
  const far = 100;
  const long = 260;
  const speed=0.0055;
  var projector, mouse = { x: 0, y: 0 },INTERSECTED;
  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);

  ///////////////////////////////////
//   var THREEx		= THREEx 		|| {};
//   THREEx.DomEvents	= function(camera, domElement)
// {
// 	var _this	= this;
  camera.position.set( 10, 10, 20);
//   this._$onClick		= function(){ _this._onClick.apply(_this, arguments);		};
// 	this._$onDblClick	= function(){ _this._onDblClick.apply(_this, arguments);	};
// 	this._$onMouseMove	= function(){ _this._onMouseMove.apply(_this, arguments);	};
// 	this._$onMouseDown	= function(){ _this._onMouseDown.apply(_this, arguments);	};
// 	this._$onMouseUp	= function(){ _this._onMouseUp.apply(_this, arguments);		};
// 	this._$onTouchMove	= function(){ _this._onTouchMove.apply(_this, arguments);	};
// 	this._$onTouchStart	= function(){ _this._onTouchStart.apply(_this, arguments);	};
// 	this._$onTouchEnd	= function(){ _this._onTouchEnd.apply(_this, arguments);	};
// 	this._$onContextmenu	= function(){ _this._onContextmenu.apply(_this, arguments);	};
// 	this._domElement.addEventListener( 'click'	, this._$onClick	, false );
// 	this._domElement.addEventListener( 'dblclick'	, this._$onDblClick	, false );
// 	this._domElement.addEventListener( 'mousemove'	, this._$onMouseMove	, false );
// 	this._domElement.addEventListener( 'mousedown'	, this._$onMouseDown	, false );
// 	this._domElement.addEventListener( 'mouseup'	, this._$onMouseUp	, false );
// 	this._domElement.addEventListener( 'touchmove'	, this._$onTouchMove	, false );
// 	this._domElement.addEventListener( 'touchstart'	, this._$onTouchStart	, false );
// 	this._domElement.addEventListener( 'touchend'	, this._$onTouchEnd	, false );
//   this._domElement.addEventListener( 'contextmenu', this._$onContextmenu	, false );
// }
//   THREEx.DomEvents.prototype.destroy	= function()
// {
// 	// unBind dom event for mouse and touch
// 	this._domElement.removeEventListener( 'click'		, this._$onClick	, false );
// 	this._domElement.removeEventListener( 'dblclick'	, this._$onDblClick	, false );
// 	this._domElement.removeEventListener( 'mousemove'	, this._$onMouseMove	, false );
// 	this._domElement.removeEventListener( 'mousedown'	, this._$onMouseDown	, false );
// 	this._domElement.removeEventListener( 'mouseup'		, this._$onMouseUp	, false );
// 	this._domElement.removeEventListener( 'touchmove'	, this._$onTouchMove	, false );
// 	this._domElement.removeEventListener( 'touchstart'	, this._$onTouchStart	, false );
// 	this._domElement.removeEventListener( 'touchend'	, this._$onTouchEnd	, false );
// 	this._domElement.removeEventListener( 'contextmenu'	, this._$onContextmenu	, false );
// }
// THREEx.DomEvents.eventNames	= [
// 	"click",
// 	"dblclick",
// 	"mouseover",
// 	"mouseout",
// 	"mousemove",
// 	"mousedown",
// 	"mouseup",
// 	"contextmenu"
// ];

///////////////////////////////////////////



t=0

  var update = function() {
    camera.position.z += (Math.sin(t*0.0055)*1)/40;
    t+=Math.PI/50*2;
    // camera.rotation.x += 0.0001;
    // camera.rotation.z = t/500 * Math.PI;
    // camera.rotation.x = 0 ;
    
  };
  var GameLoop = function() {
    requestAnimationFrame(GameLoop);
   
    update();
  };
  GameLoop();

 
  function CameraPosition(){
    for(var i = 0 ; i<10;i++){
      camera.position.z += (Math.sin(t*0.0055))/250;
      t+=Math.PI/100*2;
    }
  }

  const controls = new THREE.OrbitControls(camera, canvas);
  controls.target.set(0, 1, 0);
  controls.update();

  const scene = new THREE.Scene();
  scene.background = new THREE.Color('black');

  {
    const skyColor = 0xB1E1FF;  // light blue
    const groundColor = 0xB97A20;  // brownish orange
    const intensity = 1;
    const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);
    scene.add(light);
  }

  {
    const color = 0xFFFFFF;
    const intensity = 1;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(0, 10, 0);
    light.target.position.set(-5, 0, 0);
    scene.add(light);
    scene.add(light.target);
  }

  
var t = 0;

  {
 
    const objLoader = new THREE.OBJLoader2();
    
    objLoader.load('корпус центр.obj', (event) => {
      const root1 = event.detail.loaderRootNode;
      scene.add(root1);


      // projector = new THREE.Projector();
      document.addEventListener( 'mousemove', onDocumentMouseMove, false );

      var update = function() {
      CameraPosition();
      var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
      //  projector.unprojectVector( vector, camera );
      var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );
      console.log(ray);
      var intersects =ray.intersectObjects( scene.children );
      console.log(scene.children);
      console.log(intersects);
      };
      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
       
        update();
      };
      GameLoop();
    }
    );


  }

//////////////////////////////
///////////////////////////////

  function onDocumentMouseMove( event ) 
{
  console.log("sdfsd");
  event.preventDefault();
	mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
  mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
  // console.log(	"x-"+mouse.x+"y-"+mouse.y );
  
}
/////////////////////////////
/////////////////////////////
function onDocumentMouseDown( event ) 
{
  event.preventDefault();
	mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
  mouse.y = - ( event.clientY / window.innerHeight ) * 2 - 1;
  // console.log(	"x-"+mouse.x+"y-"+mouse.y );
  
}

  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('гайки.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z += (Math.sin(t*speed)*10)/long;

       
      };

       var GameLoop = function() {
         requestAnimationFrame(GameLoop);
         update();
      
       };
      
      GameLoop();
      
    });

  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('болты.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z -= (Math.sin(t*speed)*10)/long*1.3;
        t+=Math.PI/100*2;

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('крышка1.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);
      
      var update = function() {
        root1.position.z -= (Math.sin(t*speed)*10)/long*0.8;
        t+=Math.PI/100*2;

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('крышка2.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z += (Math.sin(t*speed)*10)/long*0.8;
        t+=Math.PI/100*2;

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('магниты.obj', (event) => {
      const root1 = event.detail.loaderRootNode;
      scene.add(root1);
      

      var update = function() {
        root1.position.z -= (Math.sin(t*speed)*10)/long*0.6;
        t+=Math.PI/100*2;

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('магниты2.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z += (Math.sin(t*speed)*10)/long*0.6;
        t+=Math.PI/100*2;
        // root1.rotation.y +=2; 
        

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('медная обмотка.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
       

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('площадка статора.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        
      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('подшипники.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('роторная площадка.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z -= (Math.sin(t*speed)*10)/long*0.6;
        t+=Math.PI/100*2;
      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
    objLoader.load('роторная площадка2.obj', (event) => {
      const root1 = event.detail.loaderRootNode;

      scene.add(root1);

      var update = function() {
        root1.position.z += (Math.sin(t*speed)*10)/long*0.6;
        t+=Math.PI/100*2;

      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
      
    });
  }
  {
    const objLoader = new THREE.OBJLoader2();
 
    objLoader.load('центр вал.obj', (event) => {
      const root1 = event.detail.loaderRootNode;
      root1.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );
      scene.add(root1);
      var update = function() {
      };

      var GameLoop = function() {
        requestAnimationFrame(GameLoop);
        update();
      
      };
      
      GameLoop();
    });
  }

  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const width = window.innerWidth;
    const height =  window.innerHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  function render() {

    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }
  requestAnimationFrame(render);
}

main();



